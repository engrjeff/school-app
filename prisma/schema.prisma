// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  TEACHER
  STUDENT
  SCHOOLADMIN
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  hashedPassword String?
  role           ROLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  studentProfile Student? // student profile associated with this user
  teacherProfile Teacher? // teacher profile associated with this user

  @@index([schoolId])
  @@index([role])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// school
model School {
  id        String @id @default(cuid())
  schoolId  String @unique
  name      String
  shortName String
  address   String
  town      String
  province  String
  region    String
  zipCode   String

  fullAddress String

  phone   String
  email   String
  website String?
  logo    String?
  slogan  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolAdmins     User[]
  programOfferings ProgramOffering[]
  schoolYears      SchoolYear[]
  courses          Course[]
  students         Student[]
  teachers         Teacher[]
  enrollments      Enrollment[]
  subjects         Subject[]
  sections         Section[]
  faculties        Faculty[]
}

enum StudentStatus {
  REGISTERED
  ENROLLED
  DROPPED
  TRANSFERRED
}

model Student {
  id String @id @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentId  String
  firstName  String
  lastName   String
  middleName String?
  suffix     String?
  birthdate  DateTime?
  email      String?
  phone      String?
  address    String
  gender     Gender
  status     StudentStatus @default(REGISTERED)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  enrollments Enrollment[]

  currentGradeYearLevel   GradeYearLevel? @relation(fields: [currentGradeYearLevelId], references: [id])
  currentGradeYearLevelId String?

  currentCourse   Course? @relation(fields: [currentCourseId], references: [id])
  currentCourseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, studentId])
  @@index([schoolId])
  @@index([currentGradeYearLevelId])
  @@index([currentCourseId])
}

model Teacher {
  id String @id @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teacherId      String  @unique // something employee number
  designation    String // like Teacher 1, Teacher 2, Master Teacher 1
  firstName      String
  lastName       String
  middleName     String?
  suffix         String?
  email          String
  phone          String
  address        String
  gender         Gender
  profilePicture String?

  isActive Boolean @default(true)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  gradingCriteria GradingCriteria[]

  handledEnrollments Enrollment[]
  recordedGrades     Grade[]
  faculties          Faculty[] // the teacher belongs to these faculties
  programs           ProgramOffering[] // the teacher teaches under these programs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, teacherId])
  @@index([schoolId])
  @@index([userId])
}

model Faculty {
  id String @id @default(cuid())

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  programOffering   ProgramOffering @relation(fields: [programOfferingId], references: [id])
  programOfferingId String

  title       String
  description String?

  teachers Teacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, programOfferingId, title])
  @@index([schoolId])
  @@index([programOfferingId])
}

// curriculum
model ProgramOffering {
  id          String @id @default(cuid())
  title       String // e.g. Regular High School, Senior HS, College of Education
  description String
  code        String // SHS, CoEng, CIT, CoE

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  courses   Course[]
  faculties Faculty[]
  teachers  Teacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, title])
  @@index([schoolId])
}

model SchoolYear {
  id    String @id @default(cuid())
  title String // e.g. 2025

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  enrollments    Enrollment[]
  recordedGrades Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Semester {
  id    String @id @default(cuid())
  title String // e.g. 1st Period, 1st Semester

  enrollments    Enrollment[]
  recordedGrades Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id    String @id @default(cuid())
  title String // e.g. BS Electronics Engineering, Regular High School
  code  String // e.g. BSECE, STEM, HS

  isActive    Boolean @default(true)
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programOffering   ProgramOffering? @relation(fields: [programOfferingId], references: [id])
  programOfferingId String?

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  subjects        Subject[]
  gradeYearLevels GradeYearLevel[]
  enrollments     Enrollment[]
  students        Student[]

  @@unique([schoolId, code])
  @@index([programOfferingId])
  @@index([schoolId])
}

model GradeYearLevel {
  id          String @id @default(cuid())
  displayName String // e.g. Grade or Year
  level       String // e.g. 1, 2, 3, or 1st, 2nd, 3rd

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  sections Section[]

  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id   String @id @default(cuid())
  name String // e.g. Prime, 1 - Sampaguita, 1 ECE-A

  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeYearLevel   GradeYearLevel @relation(fields: [gradeYearLevelId], references: [id], onDelete: Cascade)
  gradeYearLevelId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  order Int

  @@unique([name, gradeYearLevelId])
  @@index([gradeYearLevelId])
  @@index([schoolId])
}

model Subject {
  id    String @id @default(cuid())
  title String // e.g. Analytic Geometry
  code  String // e.g MATH11

  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    String
  units       Float        @default(1)
  description String?
  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recordedGrades Grade[]

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@index([schoolId])
  @@index([courseId])
}

model Enrollment {
  id String @id @default(cuid())

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  teachers Teacher[]

  subjects Subject[]

  grades      Grade[]
  finalGrades FinalGrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolYearId])
  @@index([semesterId])
  @@index([sectionId])
  @@index([studentId])
  @@index([courseId])
}

enum GradeRemarks {
  PASSED
  FAILED
  INCOMPLETE
  CONDITIONAL
}

model Grade {
  id String @id @default(cuid())

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String

  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String

  value           Float // 99, 1.2, calculated based on Grading Criteria
  gradingCriteria GradingCriteria[]
  remarks         GradeRemarks

  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolYearId])
  @@index([semesterId])
  @@index([enrollmentId])
}

model FinalGrade {
  id String @id @default(cuid())

  value       Float
  remarks     GradeRemarks
  comment     String?
  enrollments Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradingCriteria {
  id String @id @default(cuid())

  title      String // e.g. Written Works, Performance Tasks, Quizzes, Exam
  percentage Float // e.g. Written Works is 20% (0.2)

  components   GradingCriteriaComponent[]
  gradeRecords Grade[]

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
}

model GradingCriteriaComponent {
  id String @id @default(cuid())

  title String // e.g. Activity 1, Quiz 1, Final Exam
  score Float // e.g. 20, 15

  gradingCriteria   GradingCriteria @relation(fields: [gradingCriteriaId], references: [id])
  gradingCriteriaId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradingCriteriaId])
}
