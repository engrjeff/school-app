// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  TEACHER
  STUDENT
  SCHOOLADMIN
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  hashedPassword String?
  role           ROLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  schoolId String?

  studentProfileId              Student? // student profile associated with this user
  teacherProfile                Teacher? // teacher profile associated with this user
  createdSubjectGradeComponents SubjectGradeComponent[]
  createdCertificateTemplates   CertificateTemplate[]
  CorrectResponse               CorrectResponse[]

  @@index([schoolId])
  @@index([role])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// school
model School {
  id        String @id @default(cuid())
  schoolId  String @unique
  name      String
  shortName String
  address   String
  town      String
  province  String
  region    String
  zipCode   String

  fullAddress String

  phone   String
  email   String
  website String?
  logo    String?
  slogan  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolAdmins     User[]
  programOfferings ProgramOffering[]
  schoolYears      SchoolYear[]
  courses          Course[]
  students         Student[]
  teachers         Teacher[]
  subjects         Subject[]
  sections         Section[]
  faculties        Faculty[]
  classes          Class[]
  enrolledClasses  EnrollmentClass[]

  certificateTemplates CertificateTemplate[]
}

enum StudentStatus {
  REGISTERED
  ENROLLED
  DROPPED
  TRANSFERRED
}

model Student {
  id String @id @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentId  String
  firstName  String
  lastName   String
  middleName String?
  suffix     String?
  birthdate  DateTime?
  email      String?
  phone      String?
  address    String
  gender     Gender
  status     StudentStatus @default(REGISTERED)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  currentGradeYearLevel   GradeYearLevel? @relation(fields: [currentGradeYearLevelId], references: [id])
  currentGradeYearLevelId String?

  currentCourse   Course? @relation(fields: [currentCourseId], references: [id])
  currentCourseId String?

  currentSection   Section? @relation(fields: [currentSectionId], references: [id])
  currentSectionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes     Class[]
  grades      StudentGrade[]
  finalGrades StudentFinalGrade[]

  enrollmentClasses EnrollmentClass[]
  subjectGrades     SubjectGrade[]

  @@unique([schoolId, studentId])
  @@index([schoolId])
  @@index([currentGradeYearLevelId])
  @@index([currentCourseId])
}

model Teacher {
  id String @id @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teacherId      String  @unique // something employee number
  designation    String // like Teacher 1, Teacher 2, Master Teacher 1
  firstName      String
  lastName       String
  middleName     String?
  suffix         String?
  email          String
  phone          String
  address        String
  gender         Gender
  profilePicture String?

  isActive Boolean @default(true)

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  faculties Faculty[] // the teacher belongs to these faculties
  programs  ProgramOffering[] // the teacher teaches under these programs
  classes   Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdGradeComponents GradeComponent[]
  classSubjects          ClassSubject[]

  @@unique([schoolId, teacherId])
  @@index([schoolId])
  @@index([userId])
}

model Faculty {
  id String @id @default(cuid())

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  programOffering   ProgramOffering @relation(fields: [programOfferingId], references: [id], onDelete: Cascade)
  programOfferingId String

  title       String
  description String?

  teachers Teacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, programOfferingId, title])
  @@index([schoolId])
  @@index([programOfferingId])
}

// curriculum
model ProgramOffering {
  id          String @id @default(cuid())
  title       String // e.g. Regular High School, Senior HS, College of Education
  description String
  code        String // SHS, CoEng, CIT, CoE

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  courses     Course[]
  faculties   Faculty[]
  teachers    Teacher[]
  classes     Class[]
  schoolYears SchoolYear[]

  enrolledClasses         EnrollmentClass[]
  enrollmentGradingPeriod EnrollmentGradingPeriod[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, title])
  @@index([schoolId])
}

model SchoolYear {
  id    String @id @default(cuid())
  title String // e.g. 2025

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  programOffering   ProgramOffering @relation(fields: [programOfferingId], references: [id], onDelete: Cascade)
  programOfferingId String

  semesters Semester[]

  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrolledClasses EnrollmentClass[]

  @@index([schoolId])
}

model Semester {
  id    String @id @default(cuid())
  title String // e.g. 1st Semester

  classes Class[]

  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
  schoolYearId String

  enrolledClasses EnrollmentClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradingPeriod {
  id    String @id @default(cuid())
  title String // e.g. Prelim, Midterm, Finals, Q1, Q2, Q3
  order Int

  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String

  gradeComponents    GradeComponent[]
  studentGrades      StudentGrade[]
  studentFinalGrades StudentFinalGrade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId])
}

model Course {
  id    String @id @default(cuid())
  title String // e.g. BS Electronics Engineering, Regular High School
  code  String // e.g. BSECE, STEM, HS

  isActive    Boolean @default(true)
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  programOffering   ProgramOffering @relation(fields: [programOfferingId], references: [id], onDelete: Cascade)
  programOfferingId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  subjects        Subject[]
  gradeYearLevels GradeYearLevel[]
  students        Student[]
  classes         Class[]
  enrolledClasses EnrollmentClass[]

  @@unique([schoolId, code])
  @@index([programOfferingId])
  @@index([schoolId])
}

model GradeYearLevel {
  id          String @id @default(cuid())
  displayName String // e.g. Grade or Year
  level       String // e.g. 1, 2, 3, or 1st, 2nd, 3rd

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  sections Section[]

  students Student[]

  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrolledClasses EnrollmentClass[]
}

model Section {
  id   String @id @default(cuid())
  name String // e.g. Prime, 1 - Sampaguita, 1 ECE-A

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeYearLevel   GradeYearLevel @relation(fields: [gradeYearLevelId], references: [id], onDelete: Cascade)
  gradeYearLevelId String

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  order           Int
  classes         Class[]
  students        Student[]
  enrolledClasses EnrollmentClass[]

  @@unique([name, gradeYearLevelId])
  @@index([gradeYearLevelId])
  @@index([schoolId])
}

model Subject {
  id    String @id @default(cuid())
  title String // e.g. Analytic Geometry
  code  String // e.g MATH11

  school      School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    String
  units       Float   @default(1)
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  classes       Class[]
  classSubjects ClassSubject[]

  @@index([schoolId])
  @@index([courseId])
}

enum ClassStatus {
  ONGOING
  COMPLETED
  CANCELLED
}

model Class {
  id String @id @default(cuid())

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
  schoolYearId String

  semesterId String
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  programOfferingId String
  programOffering   ProgramOffering @relation(fields: [programOfferingId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  gradeYearLevel   GradeYearLevel @relation(fields: [gradeYearLevelId], references: [id], onDelete: Cascade)
  gradeYearLevelId String

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  students           Student[]
  studentFinalGrades StudentFinalGrade[]
  gradingPeriods     GradingPeriod[]

  status ClassStatus @default(ONGOING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, schoolYearId, semesterId, programOfferingId, courseId, gradeYearLevelId, sectionId, subjectId])
  @@index([schoolId])
  @@index([semesterId])
  @@index([courseId])
  @@index([sectionId])
  @@index([subjectId])
}

enum GradeRemarks {
  PASSED
  FAILED
  INCOMPLETE
  CONDITIONAL
}

// teacher creates a grade component
model GradeComponent {
  id String @id @default(cuid())

  label      String
  title      String // e.g. Written Works, Performance Tasks
  percentage Float // e.g 0.2 for 20%, max of 1.0

  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  parts  GradeComponentPart[]
  scores GradeComponentPartScore[]

  gradingPeriods GradingPeriod[] // this GradeComponent is used in these GradingPeriod

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId])
}

model GradeComponentPart {
  id String @id @default(cuid())

  order                Int
  title                String?
  highestPossibleScore Float

  gradeComponent   GradeComponent @relation(fields: [gradeComponentId], references: [id], onDelete: Cascade)
  gradeComponentId String

  scores GradeComponentPartScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeComponentPartScore {
  id String @id @default(cuid())

  score Float

  gradeComponentPartId String
  gradeComponentPart   GradeComponentPart @relation(fields: [gradeComponentPartId], references: [id], onDelete: Cascade)

  parentGradeComponentId String
  parentGradeComponent   GradeComponent @relation(fields: [parentGradeComponentId], references: [id], onDelete: Cascade)

  studentGrade   StudentGrade @relation(fields: [studentGradeId], references: [id], onDelete: Cascade)
  studentGradeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradeComponentPartId])
  @@index([parentGradeComponentId])
  @@index([studentGradeId])
}

model StudentGrade {
  id String @id @default(cuid())

  gradingPeriod   GradingPeriod @relation(fields: [gradingPeriodId], references: [id], onDelete: Cascade)
  gradingPeriodId String

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  scores GradeComponentPartScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradingPeriodId])
  @@index([studentId])
}

model StudentFinalGrade {
  id String @id @default(cuid())

  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  gradingPeriod   GradingPeriod @relation(fields: [gradingPeriodId], references: [id], onDelete: Cascade)
  gradingPeriodId String

  value   Float // snapshot value of the grade in this semester under this subject and teacher
  remarks GradeRemarks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId])
  @@index([studentId])
  @@index([gradingPeriodId])
}

// revamped
model EnrollmentClass {
  id String @id @default(cuid())

  status ClassStatus @default(ONGOING)

  schoolId String
  school   School @relation(references: [id], fields: [schoolId], onDelete: Cascade)

  schoolYearId String
  schoolYear   SchoolYear @relation(references: [id], fields: [schoolYearId], onDelete: Cascade)

  semesterId String
  semester   Semester @relation(references: [id], fields: [semesterId], onDelete: Cascade)

  programOfferingId String
  programOffering   ProgramOffering @relation(references: [id], fields: [programOfferingId], onDelete: Cascade)

  courseId String
  course   Course @relation(references: [id], fields: [courseId], onDelete: Cascade)

  gradeYearLevelId String
  gradeYearLevel   GradeYearLevel @relation(references: [id], fields: [gradeYearLevelId], onDelete: Cascade)

  sectionId String
  section   Section @relation(references: [id], fields: [sectionId], onDelete: Cascade)

  gradingPeriods EnrollmentGradingPeriod[]

  students Student[]

  subjects ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, schoolYearId, semesterId, programOfferingId, courseId, gradeYearLevelId, sectionId])
  @@index([schoolYearId])
  @@index([semesterId])
  @@index([programOfferingId])
  @@index([courseId])
  @@index([gradeYearLevelId])
  @@index([sectionId])
  @@index([schoolId])
  @@index([status])
}

model EnrollmentGradingPeriod {
  id    String @id @default(cuid())
  title String // e.g. Prelim, Midterm, Finals, Q1, Q2, Q3
  order Int

  programOfferingId String
  programOffering   ProgramOffering @relation(references: [id], fields: [programOfferingId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrolledClasses EnrollmentClass[]

  subjectGrades             SubjectGrade[]
  subjectGradeSubComponents SubjectGradeSubComponent[]

  @@index([programOfferingId])
}

model SubjectGradeComponent {
  id String @id @default(cuid())

  label      String
  title      String // e.g. Written Works, Performance Tasks
  percentage Float // e.g 0.2 for 20%, max of 1.0

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subcomponents SubjectGradeSubComponent[]

  subjectGrades SubjectGrade[]
  subjectScores SubjectGradeSubComponentScore[]

  @@index([createdById])
}

model SubjectGradeSubComponent {
  id String @id @default(cuid())

  order                Int
  title                String
  highestPossibleScore Float

  gradingPeriodId String
  gradingPeriod   EnrollmentGradingPeriod @relation(references: [id], fields: [gradingPeriodId], onDelete: Cascade)

  classSubjectId String
  classSubject   ClassSubject @relation(references: [id], fields: [classSubjectId], onDelete: Cascade)

  gradeComponent   SubjectGradeComponent @relation(fields: [gradeComponentId], references: [id], onDelete: Cascade)
  gradeComponentId String

  scores SubjectGradeSubComponentScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  correctResponse CorrectResponse?

  @@index([gradeComponentId])
  @@index([classSubjectId])
  @@index([gradingPeriodId])
}

model SubjectGradeSubComponentScore {
  id String @id @default(cuid())

  score Float?

  subjectGradeId String
  subjectGrade   SubjectGrade @relation(references: [id], fields: [subjectGradeId], onDelete: Cascade)

  subjectGradeComponentId String
  subjectGradeComponent   SubjectGradeComponent @relation(fields: [subjectGradeComponentId], references: [id], onDelete: Cascade)

  subjectGradeSubComponentId String
  subjectGradeSubComponent   SubjectGradeSubComponent @relation(fields: [subjectGradeSubComponentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subjectGradeSubComponentId])
  @@index([subjectGradeComponentId])
  @@index([subjectGradeId])
}

model ClassSubject {
  id String @id @default(cuid())

  teacherId String
  teacher   Teacher @relation(references: [id], fields: [teacherId], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(references: [id], fields: [subjectId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollmentClass   EnrollmentClass @relation(fields: [enrollmentClassId], references: [id], onDelete: Cascade)
  enrollmentClassId String

  periodicGrades            SubjectGrade[]
  subjectGradeSubComponents SubjectGradeSubComponent[]

  @@unique([enrollmentClassId, teacherId, subjectId])
  @@index([teacherId])
  @@index([subjectId])
  @@index([enrollmentClassId])
}

model SubjectGrade {
  id String @id @default(cuid())

  studentId String
  student   Student @relation(references: [id], fields: [studentId], onDelete: Cascade)

  subjectId String
  subject   ClassSubject @relation(references: [id], fields: [subjectId], onDelete: Cascade)

  gradingPeriodId String
  gradingPeriod   EnrollmentGradingPeriod @relation(references: [id], fields: [gradingPeriodId], onDelete: Cascade)

  gradeComponents SubjectGradeComponent[]
  scores          SubjectGradeSubComponentScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradingPeriodId])
  @@index([subjectId])
  @@index([studentId])
}

// certificate template
model CertificateTemplate {
  id String @id @default(cuid())

  name String

  schoolId String
  school   School @relation(references: [id], fields: [schoolId], onDelete: Cascade)

  createdBy   User   @relation(references: [id], fields: [createdById], onDelete: Cascade)
  createdById String

  frameSrc     String
  logo1        String
  logo2        String
  headingLine1 String
  headingLine2 String
  headingLine3 String
  headingLine4 String
  mainTitle    String
  bodyLine1    String
  bodyLine2    String
  bodyLine3    String
  signatories  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, name])
  @@index([schoolId])
  @@index([createdById])
}

// correct response
model CorrectResponse {
  id String @id @default(cuid())

  gradeSubComponent   SubjectGradeSubComponent @relation(references: [id], fields: [gradeSubComponentId], onDelete: Cascade)
  gradeSubComponentId String                   @unique

  items CorrectResponseItem[]

  studentCount Int

  createdBy   User   @relation(references: [id], fields: [createdById], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gradeSubComponentId])
  @@index([createdById])
}

model CorrectResponseItem {
  id String @id @default(cuid())

  correctResponse   CorrectResponse @relation(fields: [correctResponseId], references: [id], onDelete: Cascade)
  correctResponseId String

  question            String
  correctCount        Int
  correctCountPercent Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
